package assertions;

import api.todos.Todos;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

import static jdk.internal.dynalink.support.Guards.isNotNull;

/**
 * Abstract base class for {@link Todos} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractTodosAssert<S extends AbstractTodosAssert<S, A>, A extends Todos> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTodosAssert}</code> to make assertions on actual Todos.
   * @param actual the Todos we want to make assertions on.
   */
  protected AbstractTodosAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Todos's body is equal to the given one.
   * @param body the given body to compare the actual Todos's body to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Todos's body is not equal to the given one.
   */
  public S hasBody(String body) {
    // check that actual Todos we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting body of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualBody = actual.getBody();
    if (!Objects.areEqual(actualBody, body)) {
      failWithMessage(assertjErrorMessage, actual, body, actualBody);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Todos is completed.
   * @return this assertion object.
   * @throws AssertionError - if the actual Todos is not completed.
   */
  public S isCompleted() {
    // check that actual Todos we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isCompleted()) {
      failWithMessage("\nExpecting that actual Todos is completed but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Todos is not completed.
   * @return this assertion object.
   * @throws AssertionError - if the actual Todos is completed.
   */
  public S isNotCompleted() {
    // check that actual Todos we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isCompleted()) {
      failWithMessage("\nExpecting that actual Todos is not completed but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Todos's id is equal to the given one.
   * @param id the given id to compare the actual Todos's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Todos's id is not equal to the given one.
   */
  public S hasId(int id) {
    // check that actual Todos we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Todos's title is equal to the given one.
   * @param title the given title to compare the actual Todos's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Todos's title is not equal to the given one.
   */
  public S hasTitle(String title) {
    // check that actual Todos we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Todos's userId is equal to the given one.
   * @param userId the given userId to compare the actual Todos's userId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Todos's userId is not equal to the given one.
   */
  public S hasUserId(int userId) {
    // check that actual Todos we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting userId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualUserId = actual.getUserId();
    if (actualUserId != userId) {
      failWithMessage(assertjErrorMessage, actual, userId, actualUserId);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
